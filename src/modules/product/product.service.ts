import {
  BadGatewayException,
  BadRequestException,
  Injectable,
} from '@nestjs/common';
import { CreateProductDto } from './dto/create-product.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './entities/product.entity';
import { Asset } from '../assets/entities/asset.entity';
import { ProductAsset } from '../productasset/entities/productasset.entity';
import { DataSource, In, MoreThan, Repository } from 'typeorm';
import { Category } from '../category/entities/category.entity';
import slugify from 'slugify';
import { UpdateProductDto } from './dto/update-product.dto';
import aqp from 'api-query-params';
import { ImageUploadConfig } from 'src/config/image-upload.config';
import { AssetsService } from '../assets/assets.service';
import { ProductAttribute } from '../product-attribute/entities/product-attribute.entity';
import { ProductVariant } from '../product-variant/entities/product-variant.entity';
import { ProductCategory } from '../category/entities/product-category.entity';

@Injectable()
export class ProductService {
  constructor(
    @InjectRepository(Product) private productRepository: Repository<Product>,
    @InjectRepository(Asset) private assetRepository: Repository<Asset>,
    @InjectRepository(Category)
    private categoryRepository: Repository<Category>,
    @InjectRepository(ProductAsset)
    private productAssetRepository: Repository<ProductAsset>,
    @InjectRepository(ProductAttribute)
    private productAttributeRepository: Repository<ProductAttribute>,
    @InjectRepository(ProductVariant)
    private productVariantRepository: Repository<ProductVariant>,
    private readonly imageUploadConfig: ImageUploadConfig,
    private readonly assetsService: AssetsService,
    private dataSource: DataSource,
  ) {}

  async create(
    createProductDto: CreateProductDto,
    files: Express.Multer.File[],
  ) {
    const queryRunner = this.dataSource.createQueryRunner();
    await queryRunner.startTransaction();

    try {
      // ‚úÖ Ki·ªÉm tra danh m·ª•c s·∫£n ph·∫©m
      const categories = await this.categoryRepository.findBy({
        id: In(createProductDto.category_ids),
      });
      if (!categories.length) {
        throw new BadRequestException('Kh√¥ng t√¨m th·∫•y danh m·ª•c n√†o.');
      }

      // ‚úÖ Ki·ªÉm tra tr√πng t√™n s·∫£n ph·∫©m
      const existingProduct = await this.productRepository.findOneBy({
        name: createProductDto.name,
      });
      if (existingProduct) {
        throw new BadRequestException('T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i.');
      }

      // ‚úÖ T·∫°o slug s·∫£n ph·∫©m
      const slug = slugify(createProductDto.name, { lower: true });

      // ‚úÖ T·∫°o s·∫£n ph·∫©m
      let product = queryRunner.manager.create(Product, {
        ...createProductDto,
        slug,
      });
      product = await queryRunner.manager.save(product);
      console.log('‚úÖ T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng:', product.id);

      // ‚úÖ Li√™n k·∫øt s·∫£n ph·∫©m v·ªõi nhi·ªÅu danh m·ª•c
      const productCategories = categories.map((category) =>
        queryRunner.manager.create(ProductCategory, { product, category }),
      );
      await queryRunner.manager.save(productCategories);

      // ‚úÖ X·ª≠ l√Ω bi·∫øn th·ªÉ s·∫£n ph·∫©m (ProductVariant)
      if (createProductDto.variants?.length) {
        const variants: ProductVariant[] = [];
        for (const variantDto of createProductDto.variants) {
          const variant = queryRunner.manager.create(ProductVariant, {
            ...variantDto,
            product,
          });

          // ‚úÖ L·∫•y `category_id` t·ª´ danh m·ª•c ƒë·∫ßu ti√™n ho·∫∑c t·ª± ch·ªçn danh m·ª•c ph√π h·ª£p
          variant.SKU = this.generateSKU(
            categories[0]?.id || 0,
            product.id,
            variant.id,
            variant.name,
          );

          await queryRunner.manager.save(variant);
          variants.push(variant);
        }
        console.log('‚úÖ T·∫°o bi·∫øn th·ªÉ s·∫£n ph·∫©m th√†nh c√¥ng.');
      }

      // ‚úÖ Upload ·∫£nh
      let assets: Asset[] = [];
      try {
        assets = await this.assetsService.uploadImages(files);
        if (!assets.length)
          throw new BadRequestException('‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫£i l√™n.');
      } catch (error) {
        throw new BadRequestException(`‚ùå Upload ·∫£nh th·∫•t b·∫°i: ${error}`);
      }

      // ‚úÖ T·∫°o li√™n k·∫øt s·∫£n ph·∫©m - ·∫£nh
      const productAssets = assets.map((asset) =>
        this.productAssetRepository.create({
          product,
          asset,
          type: 'gallery',
        }),
      );
      await queryRunner.manager.save(ProductAsset, productAssets);
      console.log('üöÄ T·∫°o productAssets th√†nh c√¥ng.');

      // ‚úÖ Commit giao d·ªãch
      await queryRunner.commitTransaction();
      console.log('‚úÖ T·∫°o s·∫£n ph·∫©m v√† c√°c th√†nh ph·∫ßn li√™n quan th√†nh c√¥ng');

      return { product };
    } catch (error) {
      await queryRunner.rollbackTransaction();
      console.error('‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:', error);
      throw new BadRequestException(`L·ªói khi t·∫°o s·∫£n ph·∫©m: ${error}`);
    } finally {
      await queryRunner.release();
    }
  }

  /**
   *
   * @param query
   * @param current
   * @param pageSize
   * @returns
   */
  async findAll(query: string, current = 1, pageSize = 10) {
    const { filter, sort } = aqp(query);

    delete filter.pageSize;
    delete filter.current;

    const orderBy = sort || { created_at: 'DESC' };

    const [products, totalItems] = await this.productRepository.findAndCount({
      where: filter,
      skip: (current - 1) * pageSize,
      take: pageSize,
      order: orderBy,
      relations: ['productCategories', 'attributes', 'variants'],
    });

    return {
      result: products,
      totalItems,
      totalPages: Math.ceil(totalItems / pageSize),
    };
  }

  async findOne(slug: string) {
    const product = await this.productRepository.findOne({
      where: { slug: slug },
      relations: ['productCategories', 'attributes', 'variants'],
    });

    if (!product) throw new BadGatewayException('Kh√¥ng t√¨m th·∫•y product');

    return {
      result: product,
    };
  }

  async update(
    id: number,
    updateProductDto: UpdateProductDto,
    file?: Express.Multer.File,
  ) {
    const queryRunner = this.dataSource.createQueryRunner();

    try {
      // ‚úÖ B·∫Øt ƒë·∫ßu transaction
      await queryRunner.connect();
      await queryRunner.startTransaction();

      // ‚úÖ T√¨m s·∫£n ph·∫©m
      const product = await queryRunner.manager.findOne(Product, {
        where: { id },
        relations: ['productCategories', 'assets', 'variants'],
      });

      if (!product) {
        throw new BadRequestException('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ update');
      }

      // ‚úÖ X·ª≠ l√Ω th√™m danh m·ª•c m·ªõi m√† kh√¥ng x√≥a danh m·ª•c c≈©
      if (updateProductDto.category_ids?.length) {
        const categories = await queryRunner.manager.findByIds(
          Category,
          updateProductDto.category_ids, // ‚úÖ L·∫•y danh m·ª•c t·ª´ Category, kh√¥ng ph·∫£i Product
        );

        if (!categories.length) {
          throw new BadRequestException('Kh√¥ng t√¨m th·∫•y danh m·ª•c h·ª£p l·ªá');
        }

        // L·∫•y danh m·ª•c hi·ªán c√≥ c·ªßa s·∫£n ph·∫©m
        const existingProductCategories = await queryRunner.manager.find(
          ProductCategory,
          {
            where: { product: { id } },
            relations: ['category'],
          },
        );

        // L·∫•y danh s√°ch ID danh m·ª•c ƒë√£ t·ªìn t·∫°i
        const existingCategoryIds = existingProductCategories
          .filter((pc) => pc.category) // Tr√°nh l·ªói undefined
          .map((pc) => pc.category.id);

        // L·ªçc ra danh m·ª•c m·ªõi ch∆∞a c√≥
        const newCategories = categories.filter(
          (category) => !existingCategoryIds.includes(category.id),
        );

        // T·∫°o & l∆∞u danh m·ª•c m·ªõi
        if (newCategories.length > 0) {
          const newProductCategories = newCategories.map((category) =>
            queryRunner.manager.create(ProductCategory, { product, category }),
          );

          await queryRunner.manager.save(newProductCategories);
        }
      }

      // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
      if (updateProductDto.name) {
        updateProductDto.slug = slugify(updateProductDto.name, { lower: true });
      }
      await queryRunner.manager.update(Product, id, updateProductDto);

      // ‚úÖ C·∫≠p nh·∫≠t bi·∫øn th·ªÉ s·∫£n ph·∫©m
      if (updateProductDto.variants) {
        for (const variantDto of updateProductDto.variants) {
          if (variantDto.id) {
            await queryRunner.manager.update(
              ProductVariant,
              variantDto.id,
              variantDto,
            );
          }
        }
      }

      // ‚úÖ C·∫≠p nh·∫≠t ·∫£nh s·∫£n ph·∫©m n·∫øu c√≥ file m·ªõi
      if (file) {
        const existingAsset = product.assets[0]?.asset;
        if (existingAsset) {
          await queryRunner.manager.delete(Asset, existingAsset.id);
        }

        const { link, type, size } =
          await this.imageUploadConfig.uploadImage(file);
        const newAsset = queryRunner.manager.create(Asset, {
          filename: file.originalname,
          path: link,
          type,
          size,
        });
        await queryRunner.manager.save(newAsset);

        const newProductAsset = queryRunner.manager.create(ProductAsset, {
          product,
          asset: newAsset,
          type: 'gallery',
        });
        await queryRunner.manager.save(newProductAsset);
      }

      // ‚úÖ Commit transaction n·∫øu th√†nh c√¥ng
      await queryRunner.commitTransaction();

      // ‚úÖ Tr·∫£ v·ªÅ s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
      return await queryRunner.manager.findOne(Product, {
        where: { id },
        relations: ['productCategories', 'assets', 'variants'],
      });
    } catch (error) {
      // ‚ùå Rollback transaction n·∫øu c√≥ l·ªói
      if (queryRunner.isTransactionActive) {
        await queryRunner.rollbackTransaction();
      }
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error);
      throw new BadRequestException(`L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${error}`);
    } finally {
      await queryRunner.release();
    }
  }

  async remove(id: number) {
    const queryRunner = this.dataSource.createQueryRunner();
    await queryRunner.startTransaction();

    try {
      // ‚úÖ Load s·∫£n ph·∫©m c√πng v·ªõi t·∫•t c·∫£ c√°c quan h·ªá li√™n quan
      const product = await queryRunner.manager.findOne(Product, {
        where: { id },
        relations: ['variants', 'assets', 'assets.asset'], // ‚ùå B·ªè 'variants.values'
      });

      if (!product) {
        throw new BadRequestException('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a');
      }

      // ‚úÖ X√≥a t·∫•t c·∫£ ProductVariant li√™n quan
      const variantIds = product.variants.map((variant) => variant.id);
      if (variantIds.length > 0) {
        await queryRunner.manager.delete(ProductVariant, variantIds);
      }

      // ‚úÖ X√≥a t·∫•t c·∫£ ProductAsset li√™n quan
      const productAssetIds = product.assets.map((pa) => pa.id);
      if (productAssetIds.length > 0) {
        await queryRunner.manager.delete(ProductAsset, productAssetIds);

        // ‚úÖ X√≥a t·∫•t c·∫£ Asset li√™n quan
        const assetIds = product.assets.map((pa) => pa.asset.id);
        if (assetIds.length > 0) {
          await queryRunner.manager.delete(Asset, assetIds);
        }
      }

      // ‚úÖ X√≥a s·∫£n ph·∫©m ch√≠nh
      await queryRunner.manager.delete(Product, id);

      // ‚úÖ Commit transaction
      await queryRunner.commitTransaction();

      return { message: `X√≥a th√†nh c√¥ng s·∫£n ph·∫©m: ${product.name}` };
    } catch (error) {
      await queryRunner.rollbackTransaction();
      console.error('‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
      throw new BadRequestException(`L·ªói khi x√≥a s·∫£n ph·∫©m: ${error}`);
    } finally {
      await queryRunner.release();
    }
  }

  async getDiscountedProducts(limit = 10) {
    const discountedProducts = await this.productRepository.find({
      where: { discount: MoreThan(0) },
      order: { discount: 'DESC' },
      take: limit,
    });

    return { result: discountedProducts };
  }
  /**
   * ******************************************************************************
   */

  private generateSKU(
    categoryId: number,
    productId: number,
    variantId?: number,
    variantName?: string, // Th√™m t√™n bi·∫øn th·ªÉ
  ): string {
    const categoryCode = String(categoryId).padStart(2, '0'); // M√£ danh m·ª•c 2 ch·ªØ s·ªë
    const productCode = String(productId).padStart(4, '0'); // M√£ s·∫£n ph·∫©m 4 ch·ªØ s·ªë
    const variantCode = variantId ? String(variantId).padStart(2, '0') : '00'; // M√£ bi·∫øn th·ªÉ 2 ch·ªØ s·ªë

    // X·ª≠ l√Ω variantName: chu·∫©n h√≥a, b·ªè d·∫•u, vi·∫øt hoa
    const variantSlug = variantName
      ? slugify(variantName, { lower: false, strict: true }) // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
          .replace(/-/g, '') // B·ªè d·∫•u g·∫°ch ngang do slugify t·∫°o ra
          .slice(0, 10) // Gi·ªõi h·∫°n 10 k√Ω t·ª±
          .toUpperCase() // Chuy·ªÉn th√†nh ch·ªØ in hoa
      : 'DEFAULT';

    return `${variantSlug}-${categoryCode}-${productCode}-${variantCode}}`;
  }
}
